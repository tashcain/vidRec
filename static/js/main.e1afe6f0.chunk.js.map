{"version":3,"sources":["logo.svg","components/Recorder/main.js","App.js","reportWebVitals.js","index.js","config/config.js"],"names":["Main","useState","blobt","setBlobt","uuid","setUuid","displaybtn","setDisplaybtn","id","useParams","useEffect","console","log","style","paddingTop","height","window","innerHeight","onRecordingComplete","videoBlob","document","getElementsByClassName","innerHtml","Button","onClick","blob","undefined","data","FormData","file","File","append","fetch","API","api_route","method","headers","body","then","response","json","res","status","alert","message","success","notification","error","catch","err","sendDate","marginTop","color","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"uJAAe,I,mGCiIAA,MA1Hf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAsEQC,EAAOC,cAAPD,GAmBR,OANAE,qBAAU,WACRC,QAAQC,IAAIJ,GACZH,EAAQG,KAEP,IAGD,gCACE,qBAAKK,MAAO,CAAEC,WAAY,QAA1B,SACE,+DAEF,qBAAKD,MAAO,CAAEE,OAAO,GAAD,OAAKC,OAAOC,YAAc,IAA1B,OAApB,SACE,cAAC,IAAD,CACEC,oBAAqB,SAACC,GAEpBR,QAAQC,IAAI,YAAaO,GAnEjCC,SAASC,uBAAuB,UAAUC,UAAY,UACtDf,GAAc,GAoENJ,EAASgB,QAIdb,GACC,cAACiB,EAAA,EAAD,CACEC,QAAS,YAvEF,SAACC,GACd,QAAaC,IAATD,EAAoB,CACtB,IAAIE,EAAO,IAAIC,SACXC,EAAO,IAAIC,KAAK,CAACL,GAAV,WACXE,EAAKI,OAAO,OAAQF,GACpBF,EAAKI,OAAO,WAAY3B,GAExB4B,MAAMC,IAAIC,UAAY,uBAAwB,CAC5CC,OAAQ,OACRC,QAAS,CACP,8BAA+B,IAC/B,+BACE,kDAEJC,KAAMV,IAELW,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL9B,QAAQC,IAAI6B,GACO,MAAfA,EAAIC,QACNC,MAAM,OACNhC,QAAQC,IAAI,iCACZgC,IAAQC,QAAQ,mCAEhBlC,QAAQC,IAAI,CAAEgC,QAAS,eACvBE,IAAaC,MAAM,CAAEH,QAAS,kBAGjCI,OAAM,SAACC,GACNN,MAAM,MAAD,OAAOM,IACZtC,QAAQC,IAAIqC,OA0CVC,CAAShD,IAEXW,MAAO,CAAEsC,UAAW,QACpBC,MAAM,UALR,wB,QC5FOC,MAbf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzD,WCH5B0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhD,SAASiD,eAAe,SAM1BX,K,iBChBAY,EAAOC,QAAU,CACfrC,UAAW,yD","file":"static/js/main.e1afe6f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport VideoRecorder from \"react-video-recorder\";\r\nimport { Button } from \"reactstrap\";\r\nimport API from \"../../config/config\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { message, notification } from \"antd\";\r\n\r\nfunction Main() {\r\n  const [blobt, setBlobt] = useState({});\r\n  const [uuid, setUuid] = useState(\"\");\r\n  const [displaybtn, setDisplaybtn] = useState(false);\r\n\r\n  let downloadBlob = (blob, name = \"file.mp4\") => {\r\n    // Convert your blob into a Blob URL (a special url that points to an object in the browser's memory)\r\n    const blobUrl = URL.createObjectURL(blob);\r\n\r\n    // Create a link element\r\n    const link = document.createElement(\"a\");\r\n\r\n    // Set link's href to point to the Blob URL\r\n    link.href = blobUrl;\r\n    link.download = name;\r\n\r\n    // Append link to the body\r\n    document.body.appendChild(link);\r\n\r\n    // Dispatch click event on the link\r\n    // This is necessary as link.click() does not work on the latest firefox\r\n    link.dispatchEvent(\r\n      new MouseEvent(\"click\", {\r\n        bubbles: true,\r\n        cancelable: true,\r\n        view: window,\r\n      })\r\n    );\r\n\r\n    // Remove link from body\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  let changeHTml = () => {\r\n    document.getElementsByClassName(\"fFmUXH\").innerHtml = \"Retake?\";\r\n    setDisplaybtn(true);\r\n  };\r\n\r\n  let sendDate = (blob) => {\r\n    if (blob !== undefined) {\r\n      var data = new FormData();\r\n      var file = new File([blob], `vid.mp4`);\r\n      data.append(\"file\", file);\r\n      data.append(\"firmName\", uuid);\r\n\r\n      fetch(API.api_route + \"/aws/sendResponseVid\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Access-Control-Allow-Headers\":\r\n            \"Origin, X-Requested-With, Content-Type, Accept\",\r\n        },\r\n        body: data,\r\n      })\r\n        .then((response) => response.json())\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.status === 200) {\r\n            alert(\"jjj\");\r\n            console.log(\"File Uploaded Successfully!!!\");\r\n            message.success(\"File Uploaded Successfully!!!\");\r\n          } else {\r\n            console.log({ message: \"Try Again \" });\r\n            notification.error({ message: \"Try Again\" });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          alert(`err${err}`);\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const { id } = useParams();\r\n\r\n  async function getMedia(constraints) {\r\n    let stream = null;\r\n\r\n    try {\r\n      stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      /* use the stream */\r\n    } catch (err) {\r\n      /* handle the error */\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(id);\r\n    setUuid(id);\r\n    // getMedia({ audio: true, video: true });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ paddingTop: \"10px\" }}>\r\n        <h3>Delisted Video Confirmation</h3>\r\n      </div>\r\n      <div style={{ height: `${window.innerHeight - 150}px` }}>\r\n        <VideoRecorder\r\n          onRecordingComplete={(videoBlob) => {\r\n            // Do something with the video...\r\n            console.log(\"videoBlob\", videoBlob);\r\n            changeHTml();\r\n            setBlobt(videoBlob);\r\n          }}\r\n        />\r\n      </div>\r\n      {displaybtn && (\r\n        <Button\r\n          onClick={() => {\r\n            sendDate(blobt);\r\n          }}\r\n          style={{ marginTop: \"30px\" }}\r\n          color=\"primary\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Main from \"./components/Recorder/main\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          {/* <Route exact path=\"/\" component={() => <Redirect to=\"/main/:id\" />} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\r\n  api_route: \"http://delistedstocks.us-east-1.elasticbeanstalk.com\",\r\n};\r\n\r\n// http://localhost:3002\r\n"],"sourceRoot":""}